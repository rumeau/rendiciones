<?php

namespace DoctrineORMModule\Proxy\__CG__\Registry\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Registry\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'identity', 'credential', 'email', 'mobilePhone', 'homePhone', 'workPhone', 'address', 'options', 'createdDate', 'modifiedDate', 'status', 'hash', 'registries', 'comments', 'userRoles', 'userGroup', 'moderatedGroups');
        }

        return array('__isInitialized__', 'id', 'name', 'identity', 'credential', 'email', 'mobilePhone', 'homePhone', 'workPhone', 'address', 'options', 'createdDate', 'modifiedDate', 'status', 'hash', 'registries', 'comments', 'userRoles', 'userGroup', 'moderatedGroups');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdentity($identity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdentity', array($identity));

        return parent::setIdentity($identity);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdentity', array());

        return parent::getIdentity();
    }

    /**
     * {@inheritDoc}
     */
    public function setCredential($credential)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCredential', array($credential));

        return parent::setCredential($credential);
    }

    /**
     * {@inheritDoc}
     */
    public function getCredential()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredential', array());

        return parent::getCredential();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setMobilePhone($mobilePhone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMobilePhone', array($mobilePhone));

        return parent::setMobilePhone($mobilePhone);
    }

    /**
     * {@inheritDoc}
     */
    public function getMobilePhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMobilePhone', array());

        return parent::getMobilePhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setHomePhone($homePhone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHomePhone', array($homePhone));

        return parent::setHomePhone($homePhone);
    }

    /**
     * {@inheritDoc}
     */
    public function getHomePhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHomePhone', array());

        return parent::getHomePhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setWorkPhone($workPhone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWorkPhone', array($workPhone));

        return parent::setWorkPhone($workPhone);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkPhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkPhone', array());

        return parent::getWorkPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddress($address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddress', array($address));

        return parent::setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', array());

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setOptions($options)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOptions', array($options));

        return parent::setOptions($options);
    }

    /**
     * {@inheritDoc}
     */
    public function getOptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOptions', array());

        return parent::getOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDate($createdDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDate', array($createdDate));

        return parent::setCreatedDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDate', array());

        return parent::getCreatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedDate($modifiedDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedDate', array($modifiedDate));

        return parent::setModifiedDate($modifiedDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedDate', array());

        return parent::getModifiedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setHash($hash)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHash', array($hash));

        return parent::setHash($hash);
    }

    /**
     * {@inheritDoc}
     */
    public function getHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHash', array());

        return parent::getHash();
    }

    /**
     * {@inheritDoc}
     */
    public function addRegistry(\Registry\Entity\Registry $registries)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRegistry', array($registries));

        return parent::addRegistry($registries);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRegistry(\Registry\Entity\Registry $registries)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRegistry', array($registries));

        return parent::removeRegistry($registries);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistries', array());

        return parent::getRegistries();
    }

    /**
     * {@inheritDoc}
     */
    public function addComment(\Registry\Entity\Comment $comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', array($comments));

        return parent::addComment($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComment(\Registry\Entity\Comment $comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComment', array($comments));

        return parent::removeComment($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', array());

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function addUserRole(\Registry\Entity\UserRole $userRole)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserRole', array($userRole));

        return parent::addUserRole($userRole);
    }

    /**
     * {@inheritDoc}
     */
    public function addUserRoles(\Doctrine\Common\Collections\Collection $userRoles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserRoles', array($userRoles));

        return parent::addUserRoles($userRoles);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserRole(\Registry\Entity\UserRole $userRole)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserRole', array($userRole));

        return parent::removeUserRole($userRole);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserRoles(\Doctrine\Common\Collections\Collection $userRoles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserRoles', array($userRoles));

        return parent::removeUserRoles($userRoles);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserRoles', array());

        return parent::getUserRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserGroup(\Registry\Entity\UserGroup $userGroup)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserGroup', array($userGroup));

        return parent::setUserGroup($userGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserGroup', array());

        return parent::getUserGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function addModeratedGroup(\Registry\Entity\UserGroup $moderatedGroup)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addModeratedGroup', array($moderatedGroup));

        return parent::addModeratedGroup($moderatedGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function addModeratedGroups(\Doctrine\Common\Collections\Collection $moderatedGroups)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addModeratedGroups', array($moderatedGroups));

        return parent::addModeratedGroups($moderatedGroups);
    }

    /**
     * {@inheritDoc}
     */
    public function removeModeratedGroup(\Registry\Entity\UserGroup $moderatedGroup)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeModeratedGroup', array($moderatedGroup));

        return parent::removeModeratedGroup($moderatedGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function removeModeratedGroups(\Doctrine\Common\Collections\Collection $moderatedGroups)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeModeratedGroups', array($moderatedGroups));

        return parent::removeModeratedGroups($moderatedGroups);
    }

    /**
     * {@inheritDoc}
     */
    public function getModeratedGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModeratedGroups', array());

        return parent::getModeratedGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayName', array());

        return parent::getDisplayName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayName($displayName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayName', array($displayName));

        return parent::setDisplayName($displayName);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', array());

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', array($state));

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', array());

        return parent::getRoles();
    }

}
